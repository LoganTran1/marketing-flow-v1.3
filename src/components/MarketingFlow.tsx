import React, { useCallback, useState, useRef, useEffect, useMemo } from 'react';
import ReactFlow, {
  Node,
  Edge,
  Controls,
  Background,
  MiniMap,
  NodeProps,
  Handle,
  Position,
  MarkerType,
} from 'reactflow';
import 'reactflow/dist/style.css';

// Import images with correct casing
import thankYouPage from '../assets/Thank-you-page.png';
import thankYouButton from '../assets/Thank-you-page-button.png';
import contentPage from '../assets/Content-page-Nation.png';
import contentPage2 from '../assets/Content-page-Nation2.png';
import serpPage from '../assets/SERP-NATION.png';
import serpPageArrow from '../assets/SERP-NATION-Arrow.png';
import keywordBlockImage from '../assets/Key-terms-keyword-block.png';
import clickArrowImage from '../assets/Key-terms-click-with-arrow.png';

interface KeyTerm {
  id: string;
  term: string;
  description: string;
  category: string;
  subTerms?: KeyTerm[];
}

interface ApiTerm {
  id: string;
  term: string;
  description: string;
  type: 'load' | 'event';
}

interface Metric {
  id: string;
  term: string;
  description: string;
  formula: string;
}

interface NodeData {
  label: string;
  screenshot: string;
  type: string;
  description: string;
  keyTerms?: KeyTerm[];
  apiTerms?: ApiTerm[];
  metrics?: Metric[];
  link?: string;
}

// Define API terms for content page
const contentApiTerms: ApiTerm[] = [
  {
    id: 'api1',
    term: 'WIDGET_LOADS',
    description: 'Number of times the keyword block (widget) was loaded on the page',
    type: 'load'
  },
  {
    id: 'api2',
    term: 'WIDGET_SEARCHES',
    description: 'Triggered when a user clicks a keyword in the widget',
    type: 'event'
  }
];

// Define API terms for SERP page
const serpApiTerms: ApiTerm[] = [
  {
    id: 'api3',
    term: 'SELLSIDE_CLICKS',
    description: 'Triggered when a user clicks the blue "Visit Website" button',
    type: 'event'
  }
];

// Define key terms for each node
const leadGenTerms: KeyTerm[] = [
  {
    id: 'lg1',
    term: 'Partner Advertisement',
    description: 'Ads placed by our lead generation partners to attract potential customers',
    category: 'traffic'
  },
  {
    id: 'lg2',
    term: 'Click-through',
    description: 'When users click the ad to visit our content',
    category: 'engagement'
  }
];

const contentTerms: KeyTerm[] = [
  {
    id: 'ct1',
    term: 'Keyword Block (Widget)',
    description: 'An iframe containg search terms (ForceKeys). Clicks on one of these terms goes to the SERP. These are the related searches on content, aka RSOC.',
    category: 'content'
  },
  {
    id: 'ct3',
    term: 'ForceKeys',
    description: 'Optimized search terms / keywords. These are passed in the URL and are requested to be shown by Google.',
    category: 'content'
  },
  {
    id: 'ct4',
    term: 'Content',
    description: 'Any vertical can be ran, normally auto generated by S1. Optimized for performance.',
    category: 'content',
    subTerms: [
      {
        id: 'ct2',
        term: 'Headline',
        description: 'Maximum length of 55 characters (2 lines). Uses restricted language that must be approved by account manager. Must maintain keyword block position.',
        category: 'content'
      },
      {
        id: 'ct5',
        term: 'First Paragraph',
        description: 'Around 55 words with restricted language.',
        category: 'content'
      }
    ]
  }
];

const serpTerms: KeyTerm[] = [
  {
    id: 'sp1',
    term: 'Click',
    description: 'A user clicks on the "Visit Website" button. This is the monetization event. User is taken to advertiser page',
    category: 'revenue'
  },
  {
    id: 'sp3',
    term: 'Ad on the SERP',
    description: 'At least 1 advertiser SHOULD show on this page, sometimes a few. Advertisers bid on key terms to get shown on this page.',
    category: 'advertising'
  }
];

// Define metrics for Content page
const contentMetrics: Metric[] = [
  {
    id: 'metric2',
    term: 'CTR1',
    description: 'Click Through Rate 1: The rate at which users click keywords in the widget after it loads',
    formula: 'CTR1 = widget_searches / widget_loads'
  }
];

// Define metrics for SERP page
const serpMetrics: Metric[] = [
  {
    id: 'metric1',
    term: 'RPC',
    description: 'Revenue Per Click on Visit Website button',
    formula: 'RPC = Revenue / Clicks on "Visit Website" button'
  },
  {
    id: 'metric3',
    term: 'CTR2',
    description: 'Click Through Rate 2: The rate at which users click "Visit Website" after searching with a keyword',
    formula: 'CTR2 = sellside_clicks / widget_searches'
  },
  {
    id: 'metric4',
    term: 'Full Funnel CTR',
    description: 'Complete conversion rate from initial widget load to final "Visit Website" click',
    formula: 'Full Funnel CTR = sellside_clicks / widget_loads'
  }
];

const SPACING = 700;
const START_X = 100;

const initialNodes: Node<NodeData>[] = [
  {
    id: '1',
    type: 'screenshot',
    data: { 
      label: 'Lead Gen Partner Ad',
      screenshot: thankYouPage,
      type: 'content',
      description: 'User sees and clicks on partner advertisement'
    },
    position: { x: START_X, y: 40 }
  },
  {
    id: '2',
    type: 'screenshot',
    data: { 
      label: 'Content Page with Keyword Block',
      screenshot: contentPage,
      type: 'content',
      description: 'User lands on content page and clicks keyword block with search terms',
      keyTerms: contentTerms,
      apiTerms: contentApiTerms,
      metrics: contentMetrics,
      link: 'https://www.nation.com/what-to-expect-at-your-first-invisalign-consultation-appointment/?var=6028076256382092669&imp=rjs&segment=google_2619374225&utm_source=google_search_networks&s1cid=22286900553&s1agid=adgroupid&placement=&s1aid=2619374225&is_pub_ref=true&utm_campaign=nation-US-en-Invisalign_Aligners-Dental_Care-9d6b7282-1893-4a00-bc52-ad6aa57f4a3e&adgroup=What_Happens_at_Your_First_Invisalign_Consultation-Invisalign_Aligners&headline=clear%20aligners%20for%20kids&optkey=clear%20aligners%20for%20kids&forcekeyA=clear%20aligners%20for%20kids&forcekeyB=invisalign%20teeth%20treatment&forcekeyC=get%20your%20first%20invisalign%20consultation%20near%20me&forcekeyD=invisalign%20aligners%20treatment&forcekeyE=invisalign%20first%20comprehensive&s1luid=2d0ce4d7-5559-4ee7-8bfc-5a55a80d65b7&s1kid=kwd-10216756&gad_source=5&gad_campaignid=22286900553&gclid=EAIaIQobChMIptC8rdavjQMV3TcIBR3WHiXJEAAYASAAEgIkpPD_BwE'
    },
    position: { x: START_X + SPACING, y: 0 }
  },
  {
    id: '3',
    type: 'screenshot',
    data: {
      label: 'SERP (Search Engine Results Page)',
      screenshot: serpPage,
      type: 'serp',
      description: 'Search results page shows sponsored ads. When user clicks "Visit Website", this becomes the monetization event.',
      keyTerms: serpTerms,
      apiTerms: serpApiTerms,
      metrics: serpMetrics,
      link: 'https://search.nation.com/serp?sc=2Y1eS1iaQMGh00&qc=web&is_rsoc_url=True&b=google_rsonc&q=Invisalign+Aligners+Treatment&rsToken=ChMI9JiJ6ZCwjQMVFDg0CB0ZYiFjEnMBlLqpj1SIGlaWldwEzHTcZcQViFUP1VHwSwtmzeE_mlSNCYUCMH-wFZhzIHRSVsAKZ3fotwlefxHId-pnvQkVdh9sjlMJ826trTQX3a1kK4airvynOdj2F1acUKP9VymzN0P5YFbL5ioaH4FZ031bFv4dIAM&pcsa=true&nb=0&rurl=https%3A%2F%2Fapp.snowflake.com%2F&nm=26&nx=259&ny=44&is=605x294&clkt=70'
    },
    position: { x: START_X + (SPACING * 2), y: 0 }
  }
];

const initialEdges: Edge[] = [
  { 
    id: 'e1-2', 
    source: '1', 
    target: '2',
    type: 'default',
    animated: true,
    style: { stroke: '#059669', strokeWidth: 3 },
    sourceHandle: 'right',
    targetHandle: 'left',
    markerEnd: {
      type: MarkerType.ArrowClosed,
      color: '#059669',
      width: 15,
      height: 15
    }
  },
  { 
    id: 'e2-3', 
    source: '2', 
    target: '3',
    type: 'default',
    animated: true,
    style: { stroke: '#059669', strokeWidth: 3 },
    sourceHandle: 'right',
    targetHandle: 'left',
    label: 'User clicked keyword',
    labelStyle: { 
      fill: '#059669', 
      fontWeight: 600, 
      fontSize: 18
    },
    labelBgStyle: { fill: 'white' },
    labelBgPadding: [8, 4],
    labelBgBorderRadius: 4,
    markerEnd: {
      type: MarkerType.ArrowClosed,
      color: '#059669',
      width: 15,
      height: 15
    }
  }
];

const ScreenshotNode = ({ data }: NodeProps<NodeData>) => {
  const [selectedTerm, setSelectedTerm] = useState<KeyTerm | null>(null);
  const [selectedParentTerm, setSelectedParentTerm] = useState<KeyTerm | null>(null);
  const [selectedApiTerm, setSelectedApiTerm] = useState<ApiTerm | null>(null);
  const [selectedMetric, setSelectedMetric] = useState<Metric | null>(null);
  const [isAlternateImage, setIsAlternateImage] = useState(false);
  const keyTermsRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (keyTermsRef.current && !keyTermsRef.current.contains(event.target as Element)) {
        setSelectedTerm(null);
        setSelectedParentTerm(null);
        setSelectedApiTerm(null);
        setSelectedMetric(null);
      }
    };

    document.addEventListener('mousedown', handleClickOutside);
    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, []);

  const renderKeyTerms = (terms: KeyTerm[]) => {
    const mainTerms = terms.map((term) => (
      <div key={term.id}>
        <button
          onClick={() => {
            if (term.subTerms) {
              setSelectedParentTerm(selectedParentTerm?.id === term.id ? null : term);
              setSelectedTerm(null);
            } else {
              setSelectedTerm(selectedTerm?.id === term.id ? null : term);
            }
            setSelectedApiTerm(null);
            setSelectedMetric(null);
          }}
          className={`px-6 py-2 rounded-full text-base font-medium transition-colors w-fit whitespace-nowrap text-center
            ${(selectedParentTerm?.id === term.id || selectedTerm?.id === term.id)
              ? 'bg-blue-500 text-white shadow-md' 
              : 'bg-white text-blue-700 hover:bg-blue-50 border border-blue-200 shadow-sm'}`}
        >
          {term.term}
        </button>
      </div>
    ));

    const selectedTermWithSubs = terms.find(term => term.id === selectedParentTerm?.id && term.subTerms);
    
    return (
      <div className="flex flex-col gap-4">
        <div className="flex flex-row flex-wrap justify-start gap-4">
          {mainTerms}
        </div>
        {selectedTermWithSubs && (
          <div className="flex flex-row flex-wrap gap-4 pl-4 border-l-2 border-blue-200">
            {selectedTermWithSubs.subTerms?.map((subTerm) => (
              <button
                key={subTerm.id}
                onClick={(e) => {
                  e.stopPropagation();
                  setSelectedTerm(selectedTerm?.id === subTerm.id ? null : subTerm);
                  setSelectedApiTerm(null);
                  setSelectedMetric(null);
                }}
                className={`px-6 py-2 rounded-full text-base font-medium transition-colors w-fit whitespace-nowrap text-center
                  ${selectedTerm?.id === subTerm.id 
                    ? 'bg-blue-500 text-white shadow-md' 
                    : 'bg-white text-blue-700 hover:bg-blue-50 border border-blue-200 shadow-sm'}`}
              >
                {subTerm.term}
              </button>
            ))}
          </div>
        )}
      </div>
    );
  };

  // Add click handler for image toggle
  const handleImageClick = (e: React.MouseEvent) => {
    if ((data.type === 'content' && data.screenshot !== thankYouPage) || data.type === 'serp') {
      e.stopPropagation();
      setIsAlternateImage(prev => !prev);
    }
  };

  // Get the correct image source based on node type and toggle state
  const getImageSource = () => {
    if (data.type === 'content' && isAlternateImage && data.screenshot !== thankYouPage) {
      return contentPage2;
    } else if (data.type === 'serp' && isAlternateImage) {
      return serpPageArrow;
    }
    return data.screenshot;
  };

  return (
    <div className="relative">
      <div className="flex flex-col items-center">
        {/* Label on top */}
        <div className="p-2 mb-2 text-center">
          <h2 className="text-xl font-semibold text-gray-800 tracking-tight">{data.label}</h2>
          <div className="mt-1 text-sm font-medium text-emerald-600">{data.description}</div>
          {data.link && (
            <a
              href={data.link}
              target="_blank"
              rel="noopener noreferrer"
              className="inline-flex items-center gap-1 mt-1 px-3 py-1.5 bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition-colors shadow-sm"
            >
              <svg className="w-3.5 h-3.5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14" />
              </svg>
              Live Link
            </a>
          )}
        </div>

        {/* Content with conditional iPhone frame */}
        <div className="relative">
          <Handle 
            type="target" 
            position={Position.Left} 
            style={{ left: '-20px', top: '50%', opacity: 0 }}
          />
          <div className="bg-white rounded-lg shadow-lg overflow-hidden">
            <div className="bg-gray-800 rounded-[40px] p-3 shadow-xl">
              <div className="relative bg-black rounded-[35px] border-[6px] border-black w-[380px]">
                <div 
                  className="relative overflow-hidden rounded-[28px] bg-white cursor-pointer"
                  onClick={handleImageClick}
                >
                  <img 
                    src={getImageSource()} 
                    alt={data.label}
                    className="w-full"
                  />
                  {data.screenshot === thankYouPage && (
                    <div className="absolute top-[42%] left-0 right-0 flex justify-center">
                      <img 
                        src={thankYouButton} 
                        alt="Thank you button"
                        className="w-[60%]"
                      />
                    </div>
                  )}
                </div>
              </div>
            </div>
          </div>
          <Handle 
            type="source" 
            position={Position.Right} 
            style={{ right: '-20px', top: '50%', opacity: 0 }}
          />
        </div>

        {/* Key Terms Section */}
        {data.keyTerms && (
          <div ref={keyTermsRef} className="absolute top-[100%] left-1/2 -translate-x-1/2 mt-6 min-w-[560px] p-4 bg-gray-50 rounded-lg">
            <h3 className="text-lg font-semibold text-gray-700 mb-3">Key Terms:</h3>
            {renderKeyTerms(data.keyTerms)}
            
            {/* Term Description */}
            {(selectedTerm || selectedParentTerm) && (
              <div className="mt-4 p-4 bg-white rounded-lg shadow-md border border-gray-100">
                <div className="flex justify-between items-start gap-4">
                  <div className="flex-1">
                    <h4 className="text-lg font-medium text-gray-800">
                      {selectedTerm?.term || selectedParentTerm?.term}
                    </h4>
                    <p className="text-base text-gray-600 mt-2 leading-relaxed">
                      {selectedTerm?.description || selectedParentTerm?.description}
                    </p>
                    {(selectedTerm?.term === 'Keyword Block (Widget)' || selectedParentTerm?.term === 'Keyword Block (Widget)') && (
                      <div className="mt-4">
                        <img 
                          src={keywordBlockImage} 
                          alt="Keyword Block Example" 
                          className="w-full rounded-lg shadow-sm"
                        />
                      </div>
                    )}
                    {selectedTerm?.term === 'Click' && (
                      <div className="mt-4">
                        <img 
                          src={clickArrowImage} 
                          alt="Click Example" 
                          className="w-full rounded-lg shadow-sm"
                        />
                      </div>
                    )}
                  </div>
                  <span className="text-sm font-medium text-blue-600 px-3 py-1.5 bg-blue-50 rounded-full whitespace-nowrap">
                    #{selectedTerm?.category || selectedParentTerm?.category}
                  </span>
                </div>
              </div>
            )}

            {/* API Terms Section */}
            {data.apiTerms && (
              <>
                <h3 className="text-lg font-semibold text-gray-700 mb-3 mt-6">API Terms:</h3>
                <div className="flex flex-wrap justify-start gap-4">
                  {data.apiTerms.map((term) => (
                    <button
                      key={term.id}
                      onClick={() => {
                        setSelectedApiTerm(selectedApiTerm?.id === term.id ? null : term);
                        setSelectedTerm(null);
                        setSelectedMetric(null);
                      }}
                      className={`px-4 py-2 rounded-full text-base font-medium transition-colors
                        ${selectedApiTerm?.id === term.id 
                          ? 'bg-purple-500 text-white shadow-md' 
                          : 'bg-white text-purple-700 hover:bg-purple-50 border border-purple-200 shadow-sm'}`}
                    >
                      {term.term}
                    </button>
                  ))}
                </div>

                {/* API Term Description */}
                {selectedApiTerm && (
                  <div className="mt-4 p-4 bg-white rounded-lg shadow-md border border-gray-100">
                    <div className="flex justify-between items-start gap-4">
                      <div className="flex-1">
                        <h4 className="text-lg font-medium text-gray-800">{selectedApiTerm.term}</h4>
                        <p className="text-base text-gray-600 mt-2 leading-relaxed">{selectedApiTerm.description}</p>
                      </div>
                      <span className={`text-sm font-medium px-3 py-1.5 rounded-full whitespace-nowrap
                        ${selectedApiTerm.type === 'load' 
                          ? 'bg-green-50 text-green-600' 
                          : 'bg-orange-50 text-orange-600'}`}
                      >
                        {selectedApiTerm.type.toUpperCase()}
                      </span>
                    </div>
                  </div>
                )}
              </>
            )}

            {/* Metrics Section */}
            {data.metrics && (
              <>
                <h3 className="text-lg font-semibold text-gray-700 mb-3 mt-6">Metrics:</h3>
                <div className="flex flex-wrap justify-start gap-4">
                  {data.metrics.map((metric) => (
                    <button
                      key={metric.id}
                      onClick={() => {
                        setSelectedMetric(selectedMetric?.id === metric.id ? null : metric);
                        setSelectedTerm(null);
                        setSelectedApiTerm(null);
                      }}
                      className={`px-4 py-2 rounded-full text-base font-medium transition-colors
                        ${selectedMetric?.id === metric.id 
                          ? 'bg-amber-500 text-white shadow-md' 
                          : 'bg-white text-amber-700 hover:bg-amber-50 border border-amber-200 shadow-sm'}`}
                    >
                      {metric.term}
                    </button>
                  ))}
                </div>

                {/* Metric Description */}
                {selectedMetric && (
                  <div className="mt-4 p-4 bg-white rounded-lg shadow-md border border-gray-100">
                    <div className="flex flex-col gap-2">
                      <h4 className="text-lg font-medium text-gray-800">{selectedMetric.term}</h4>
                      <p className="text-base text-gray-600">{selectedMetric.description}</p>
                      <div className="mt-2 px-3 py-2 bg-amber-50 rounded-lg">
                        <code className="text-amber-700 font-mono">{selectedMetric.formula}</code>
                      </div>
                    </div>
                  </div>
                )}
              </>
            )}
          </div>
        )}
      </div>
    </div>
  );
};

const nodeTypes = {
  screenshot: ScreenshotNode,
};

export function MarketingFlow() {
  return (
    <div className="w-full h-[800px]">
      <ReactFlow
        nodes={initialNodes}
        edges={initialEdges}
        nodeTypes={nodeTypes}
        fitView
        minZoom={0.4}
        maxZoom={1.5}
        defaultViewport={{ zoom: 0.7, x: 0, y: 0 }}
        fitViewOptions={{
          padding: 0.3,
          includeHiddenNodes: true,
        }}
      >
        <Background color="#aaa" gap={16} />
        <Controls />
        <MiniMap style={{ background: '#f8f8f8' }} />
      </ReactFlow>
    </div>
  );
} 